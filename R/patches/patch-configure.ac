$NetBSD: patch-configure.ac,v 1.8 2024/01/08 23:13:03 mef Exp $

Do not include system paths in R_LD_LIBRARY_PATH.
NetBSD, FreeBSD, DragonFly, Darwin and Solaris fixes

--- configure.ac.orig	2024-03-27 08:02:03.000000000 +0900
+++ configure.ac	2024-04-29 00:00:51.788804133 +0900
@@ -33,6 +33,7 @@ m4_define([R_VERSION],
 AC_INIT([R],[R_VERSION],[https://bugs.r-project.org],[R],[https://www.r-project.org])
 AC_CONFIG_SRCDIR([src/include/Defn.h])
 AC_CONFIG_AUX_DIR([tools])
+AC_CONFIG_MACRO_DIR([m4])
 
 ### * Information on the package.
 
@@ -136,7 +137,7 @@ R_CONFIG_ARGS="${ac_configure_args}"
 AC_SUBST(R_CONFIG_ARGS)
 
 ## Shortcut for musl which refuses to identify itself at C level
-if test "${host_os}" == "linux-musl"; then
+if test "${host_os}" = "linux-musl"; then
   AC_DEFINE(OS_MUSL, 1, [Define if running on Linux-musl])
 fi
 
@@ -316,7 +317,7 @@ AC_ARG_ENABLE([BLAS-shlib],
 
 ## As from R 3.2.0 split up -L... and -lR
 if test "${want_R_shlib}" = yes; then
-  LIBR0="-L\"\$(R_HOME)/lib\$(R_ARCH)\""
+  LIBR0="-Wl,-R${prefix}/lib/R/lib\$(R_ARCH) -L\"\$(R_HOME)/lib\$(R_ARCH)\""
   LIBR1=-lR
 else
   LIBR0=
@@ -898,7 +899,7 @@ case "${host_os}" in
     ## Not so bad in later versions of Darwin, 
     ## where DYLD_FALLBACK_LIBRARY_PATH is used (see below).
     ;;
-  *)
+  donotuse*)
     for arg in ${LDFLAGS}; do
       case "${arg}" in
         -L*)
@@ -1549,7 +1550,7 @@ rm -f libconftest${DYLIB_EXT} conftest.c
     fpicflags="${darwin_pic}"
     shlib_cxxldflags="${shlib_ldflags}"
     ;;
-  freebsd*)
+  freebsd*|dragonfly*)
     ## maybe this needs to depend on the compiler:
     ## -export-dynamic used to work, but does not with clang.
     ## Seems FreeBSD has used the GNU linker since at least 3.0 (Oct 1998)
@@ -1638,6 +1639,12 @@ dnl     ;;
     ;;
   netbsd*)
     ## See the comments about FreeBSD
+    fpicflags="-fPIC"
+    case "${host_cpu}" in
+      powerpc*)
+      cpicflags="-fPIC"
+      ;;
+    esac
     if ${CPP} - -dM < /dev/null | grep __ELF__ >/dev/null ; then
       main_ldflags="-Wl,--export-dynamic"
       shlib_ldflags="-shared"
@@ -1674,22 +1681,22 @@ dnl     ;;
   solaris*)
 ## SPARC has only an 8k global object table, 1024 entries on 64-bit,
 ## so need PIC not pic.  They are the same on other Solaris platforms.
-    shlib_ldflags="-G"
-    shlib_cxxldflags="-G"
    if test "${GCC}" = yes; then
+      shlib_ldflags="-shared"
+      shlib_cxxldflags="-shared"
       cpicflags="-fPIC"
       ld=`${CC} -print-prog-name=ld`
       ldoutput=`${ld} -v 2>&1 | grep GNU`
       if test -n "${ldoutput}"; then
 	main_ldflags="-Wl,-export-dynamic"
-	shlib_ldflags="-shared"
-        shlib_cxxldflags="-shared"
       else
         ## it seems gcc c 4.6.2 needs this with Solaris linker
 	shlib_ldflags="-shared"
         shlib_cxxldflags="-shared"
       fi
     else
+      shlib_ldflags="-G"
+      shlib_cxxldflags="-G"
       cpicflags="-KPIC"
       if test "`basename ${CXX}`" = "CC" ; then
         ## Forte version 7 needs -lCstd: Forte 6 does not.	
@@ -1768,7 +1775,7 @@ fi
 : ${CXXPICFLAGS="${cxxpicflags}"}
 if test -n "${CXX}" -a -z "${CXXPICFLAGS}"; then
   case "${host_os}" in
-    aix*|mingw*|msys)
+    aix*|mingw*|msys|darwin*)
       ;;
     *)
       warn_cxxpicflags="I could not determine CXXPICFLAGS."
@@ -1828,8 +1835,10 @@ dnl     ;;
     MAJR_VERSION=`echo "${PACKAGE_VERSION}" | sed  -e "s/[[\.]][[1-9]]$/.0/"` 
     LIBR_LDFLAGS="-install_name libR.dylib -compatibility_version ${MAJR_VERSION}  -current_version ${PACKAGE_VERSION}  -headerpad_max_install_names"
     RLAPACK_LDFLAGS="-install_name libRlapack.dylib -compatibility_version ${MAJR_VERSION} -current_version ${PACKAGE_VERSION}  -headerpad_max_install_names"
+    LIBR_LDFLAGS="-install_name ${PREFIX}/lib/R/lib/libR.dylib -compatibility_version ${MAJR_VERSION}  -current_version ${PACKAGE_VERSION}  -headerpad_max_install_names"
+    RLAPACK_LDFLAGS="-install_name ${PREFIX}/lib/R/lib/libRlapack.dylib -compatibility_version ${MAJR_VERSION} -current_version ${PACKAGE_VERSION}  -headerpad_max_install_names"
     ## don't use version in libRblas so we can replace it with any BLAS implementation
-    RBLAS_LDFLAGS="-install_name libRblas.dylib -headerpad_max_install_names"
+    RBLAS_LDFLAGS="-install_name ${PREFIX}/lib/R/lib/libRblas.dylib -headerpad_max_install_names"
     ;;
 dnl   hpux*)
 dnl     ## Needs to avoid embedding a relative path ../../../bin.
@@ -2825,7 +2834,7 @@ case "${host_os}" in
     r_ld_library_defaults="/usr/lib64:/lib64:/usr/lib:/lib"
     ;;
   solaris*)
-    r_ld_library_defaults="/usr/lib:/lib"
+    r_ld_library_defaults="/usr/lib:/lib:/usr/lib/amd64:/lib/amd64:/usr/lib/64:/lib/64"
     ;;
   *)
     r_ld_library_defaults=
@@ -2995,9 +3004,9 @@ sdk_OK=no)
 dnl No longer used as we only build (or not) BLAS and LAPACK shims
 dnl  AC_DEFINE(USE_NEW_ACCELERATE, 1, [Define to use Apple's (new) Accelerate])
 fi
-AM_CONDITIONAL(BUILD_NEW_ACCELERATE, [test "x${use_accelerate}" == xyes])
+AM_CONDITIONAL(BUILD_NEW_ACCELERATE, [test "x${use_accelerate}" = xyes])
 AM_CONDITIONAL(BUILD_NEW_ACCELERATE_LAPACK,
-              [test "x${use_accelerate_lapack}" == xyes])
+              [test "x${use_accelerate_lapack}" = xyes])
 
 dnl record compiler versions
 CC_VER=`${CC} --version | ${SED} -n 1p`
