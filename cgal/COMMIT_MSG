math/cgal: Update to 5.6.2

Most noteably, since v5.0, cgal is by default header-only.

CGAL-5.6.2

CGAL-5.6.2 is a bug-fix release

CGAL-5.6.1

CGAL-5.6.1 is a bug-fix release.

CGAL-5.6

The CGAL Open Source Project is pleased to announce the release 5.6 of CGAL, the Computational Geometry Algorithms Library.

Besides fixes and general enhancement to existing packages, the following has changed since CGAL 5.5:

General Changes

    Breaking change: Package-specific assertions, preconditions, and postconditions (such as CGAL_triangulation_assertion) have been removed. Corresponding CGAL-wide versions (such as CGAL_assertion) should be used instead.

Shape Detection (major changes)

    Breaking change: The region growing part of the package have been reworked to fix design issues introduced with the handling of FaceGraph models. In particular, the notion of Item has been introduced to reference an element in the input range of elements. Region maps now operates on Item and no longer on the value type of the input range.
    Breaking change: The method update() in the concept RegionType now returns a Boolean instead of void, that is used inside the class Region_growing for detecting if the input conditions for the new region are satisfied. This change affects only user-defined types of regions.
    Breaking change: The constructors of all models used together with the region growing algorithm now enable users to provide parameters through the named parameters mechanism.
    All fitting classes in the region growing framework are now using better versions of the region conditions, more precise and faster, including the correct normal orientations.
    Added new models of the concept RegionType for getting linear regions in a set of 2D and 3D segments and on 2D and 3D polylines.
    Added the class Polyline_graph for extracting a set of polylines from a face graph, which splits this graph into a set of user-defined regions.
    Added new shapes to the Region Growing algorithm on a point set: circles in 2D, spheres in 3D, and cylinders in 3D.

2D Straight Skeleton and Polygon Offsetting (major changes)

    Added weighted straight skeletons: weighted straight skeletons are a generalization of straight skeletons. Contour edges are assigned a positive weight, which can be understood as assigning a speed to the wavefront spawned from the contour edge.
    Added straight skeleton extrusion: this CGAL package now implements the extrusion of weighted straight skeletons of polygons with holes. The output is a closed, combinatorially 2-manifold surface triangle mesh.
    See also the news entry.

2D and 3D Linear Geometry Kernel

    Added the functor CompareAngle_3 to the concept Kernel to compare an angle defined by three points to the cosinus of another angle.

Combinatorial Maps, Generalized Maps, and Linear Cell Complex

    Added a version that uses indices instead of handles as dart and attribute descriptors. As the indices are integers convertible from and to std::size_t, they can be used as index into vectors which store properties. To use the index version, Use_index must be defined and be equal to CGAL::Tag_true in the item class.

Linear Cell Complex

    Added the class Linear_cell_complex_incremental_builder_3.

2D Arrangements

    Introduced an overload function template, namely draw(arr), that renders arrangements based on the Basic_viewer_qt class template. As of now, only 2D arrangements on the plane induced by (i) segments, (ii) conics, and (iii) circular arcs or (linear) segments are supported.
    Improved the traits class template that handles conics, namely Arr_conic_traits_2. This includes the following: 1. Fixed a couple of bugs and slightly optimized some functions. 2. Introduced functionality that approximates conics with polylines. (This is used to draw conic curves.) 3. Breaking change: Changed the interface to generate conic curves. In the past, curves where generated directly using the constructors of the conic and x-monotone conic constructs. Now, they are constructed via function objects provided by the traits. This eliminates the constructions of temporary kernels. The old functionality is obsolete, but still supported for a limited number of versions. It depends on a static member function of the traits. In a future version this function will no longer be static, implying that the old functionality will no longer be supported.
    Introduced functionality that approximates circular segments with polylines. (This is used to draw conic curves.)

Polygon Mesh Processing

    Added functions CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces() and CGAL::Polygon_mesh_processing::detect_corners_of_regions(), which enable partitioning a mesh into planar regions using the region growing algorithm from the Shape Detection package.

    Added the functions CGAL::Polygon_mesh_processing::remesh_planar_patches() and CGAL::Polygon_mesh_processing::remesh_almost_planar_patches(), which can be used to remesh patches of coplanar faces in a mesh.

    Added the function CGAL::Polygon_mesh_processing::surface_Delaunay_remeshing(), which can be used to remesh a surface triangle mesh using the Delaunay refinement algorithm from the 3D Mesh Generation package.

    Added the function CGAL::Polygon_mesh_processing::remove_almost_degenerate_faces(), which can be used to remove badly shaped triangles faces in a mesh.

    Added the functions CGAL::Polygon_mesh_processing::does_triangle_soup_self_intersect() and CGAL::Polygon_mesh_processing::triangle_soup_self_intersections() to identify and report self-intersections in a triangle soup, similarly to existing functions on triangle meshes.

    Added the function CGAL::Polygon_mesh_processing::triangulate_polygons(), which allows users to triangulate polygon soups.

    Added a named parameter to CGAL::Polygon_mesh_processing::smooth_shape() to disable the scaling, which otherwise aims to compensate volume loss during smoothing.

    Deprecated the overloads of functions CGAL::Polygon_mesh_processing::triangulate_hole(), CGAL::Polygon_mesh_processing::triangulate_and_refine_hole(), and CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole() which have output iterators for vertices and faces as parameter. They are replaced by overloads with two additional named parameters.

2D Convex Hulls

    Breaking change: The concept ConvexHullTraits_2 no longer requires the functor Less_signed_distance_to_line_2, but requires the functor Compare_signed_distance_to_line_2 instead.
    The long-deprecated classes Convex_hull_projective_xy_traits_2, Convex_hull_projective_xz_traits_2, and Convex_hull_projective_yz_traits_2 have been removed. Users should use Projection_traits_xy_3, Projection_traits_xz_3, and Projection_traits_yz_3 instead.

2D Triangulations

    Added the function CGAL::mark_domain_in_triangulation() to mark faces connected with non-constrained edges as inside of the domain based on the nesting level.

2D Conforming Triangulations and Meshes

    Added new overloads to the function write_VTU(), with property maps for specifying the domain.
    Deprecated usage of boost parameters in favor of function named parameters in CGAL::lloyd_optimize_mesh_2().
    Deprecated two overloads of the function refine_Delaunay_mesh(), and replaced them with versions using function named parameters.

2D Hyperbolic Triangulations

    Breaking change: the concept HyperbolicTriangulationFaceBase_2 has been modified to better reflect the triangulation's requirements and avoid a conflict with the requirements described by the concept TriangulationDataStructure_2::Face. The model CGAL::Hyperbolic_triangulation_face_base_2 has been adapted correspondingly.

3D Simplicial Mesh Data Structure (new package)

    This new package wraps all the existing code that deals with a MeshComplex_3InTriangulation_3 to describe 3D simplicial meshes, and makes the data structure independent from the tetrahedral mesh generation package.

Tetrahedral Remeshing

    Breaking change: The template parameters of CGAL::Tetrahedral_remeshing::Remeshing_vertex_base_3 and CGAL::Tetrahedral_remeshing::Remeshing_cell_base_3 have been modified.

3D Mesh Generation

    Added two new named parameters to the named constructor CGAL::create_labeled_image_mesh_domain() for automatic detection and protection of 1D-curves that lie at the intersection of three or more subdomains extracted from labeled images.
    Added CGAL::Sizing_field_with_aabb_tree, a geometry-aware sizing field for feature edges in polyhedral domains.
    Added new meshing criterion edge_min_size to avoid subdividing sharp edges that are shorter than a prescribed size bound.
    Added new meshing criteria facet_min_size and cell_min_size to prevent Delaunay refinement from creating simplices smaller than a prescribed bound.
    Deprecated usage of boost parameters in favor of function named parameters.

3D Periodic Mesh Generation

    Periodic Mesh Generation now supports non-cubic domains.
    Deprecated usage of boost parameters in favor of function named parameters.

Surface Mesh Simplification

    The stop predicates Count_stop_predicate and Count_ratio_stop_predicate are renamed to Edge_count_stop_predicate and Edge_count_ratio_stop_predicate. Older versions have been deprecated.
    Introduced Face_count_stop_predicate and Face_count_ratio_stop_predicate, which can be used to stop the simplification algorithm based on a desired number of faces in the output, or a ratio between input and output face numbers.

2D Regularized Boolean Set Operations

    Exposed all required member functions of the GeneralPolygonWithHoles_2 concept (e.g., clear_outer_boundary(), clear_holes(), and clear() ).

Known Bug

    MSVC 2015 is still supported by this version of CGAL, but the feature Segment Cell Iterator of the class CGAL::Triangulation_3 does not compile with MSVC 2015.

CGAL-5.5

The CGAL Open Source Project is pleased to announce the release 5.5 of CGAL, the Computational Geometry Algorithms Library.

Besides fixes and general enhancement to existing packages, the following has changed since CGAL 5.4:

3D Alpha Wrapping (new package)

    This component takes a 3D triangle mesh, soup, or point set as input, and generates a valid (watertight, intersection-free, and combinatorially 2-manifold) surface triangle mesh that contains the input.
    The algorithm proceeds by shrink-wrapping and refining a 3D Delaunay triangulation, starting from a loose bounding box of the input.
    Two user-defined parameters, alpha and offset, offer control over the maximum size of cavities where the shrink-wrapping process can enter, and the tightness of the final surface mesh to the input, respectively. Once combined, these parameters provide a means to trade fidelity
    to the input for complexity of the output.

    See also the announcement page.

2D Straight Skeleton and Polygon Offsetting (breaking change)

    Fix the output of the function CGAL::create_exterior_skeleton_and_offset_polygons_with_holes_2()
    to not take into account the offset of the outer frame.
    Fix the computation of the exterior offset of a polygon with holes that was not computing the offset of the holes

3D Convex Hulls

    Added an overload of the function CGAL::convex_hull_3(), which writes the result in an indexed triangle set.

2D Polygons

    Add vertex, edge, and hole ranges.
    The concept GeneralPolygonWithHoles_2 now requires the nested type Polygon_2 instead of General_polygon_2.

2D Regularized Boolean Set-Operations

    The concept GeneralPolygonSetTraits_2 now requires the nested type Construct_polygon_with_holes_2 instead of Construct_general_polygon_with_holes_2.

Combinatorial Maps

    Removed old code deprecated in CGAL 4.9 and 4.10 (global functions, and information associated with darts).

2D Arrangements

    Fixed the intersect_2, compare_y_at_x_right, and compare_y_at_x_left function objects of the traits class template Arr_geodesic_arc_on_sphere_traits_2 that handles geodesic arcs on sphere and applied a small syntactical fix to the tracing traits.

Tetrahedral Mesh Generation

    Added the function remove_isolated_vertices() as a post-processing step for the tetrahedral mesh generation.

Polygon Mesh Processing

    Added the function CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_soup(), which enables re-orienting the faces of a triangle soup based on the orientation of the nearest face in a reference triangle soup.
    Added the function CGAL::Polygon_mesh_processing::compatible_orientations(), which enables to retrieve the (in)compatibility of orientations of faces from different connected components.
    Added the function CGAL::Polygon_mesh_processing::tangential_relaxation(), which applies an area-based tangential mesh smoothing to the vertices of a surface triangle mesh.
    Added the named parameter visitor to the function triangulate_hole(), which enables to track progress with callbacks.
    Added more functions in the visitor of the corefinement based methods to track progress.

Surface Mesh Simplification

    Introduced four variations of the Garland-Heckbert simplification algorithm based on the probabilistic approach of Trettner and Kobbelt (Fast and Robust QEF Minimization using Probabilistic Quadrics): GarlandHeckbert_plane_policies, GarlandHeckbert_probabilistic_plane_policies, GarlandHeckbert_triangle_policies, and GarlandHeckbert_probabilistic_triangle_policies.
    The class GarlandHeckbert_policies has been deprecated, GarlandHeckbert_plane_policies replaces it.

Point Set Processing

    A new optional named parameter, min_points_per_cell has been added to grid_simplify_point_set(). By adding a minimal number of points in a cell such that a point is retained, one can also filter out low density areas and outliers: in the case of densely sampled point clouds, this yields better results than using grid simplification and then outlier removal, while being very vast. The default value is 1 to keep the previous behavior as default.

dD Spatial Searching

    Added the member function write_graphviz() to the class Kd_tree that writes the tree in a stream in the Graphviz format.

CGAL and the Boost Graph Library (BGL)

    Added the function invert_selection() in the class Face_filtered_graph, which toggles the selected status of a graph: selected faces are deselected, and unselected faces are selected.

CGAL-5.4

The CGAL Open Source Project is pleased to announce the release 5.4 of CGAL, the Computational Geometry Algorithms Library.

Besides fixes and general enhancement to existing packages, the following has changed since CGAL 5.3:

General changes

    Added the cmake target CGAL::CGAL_Basic_viewer to ease the compilation of programs using the basic viewer-based function CGAL::draw(). This target will define the macro and link with CGAL_Qt5 target when linked with it.

    The kernel providing exact constructions and exact predicates (CGAL::Exact_predicates_exact_constructions_kernel) is now thread-safe. See changes in 2D and 3D Linear Geometry Kernel for more details.

    The class Geomview_stream and all the dependent features have been removed from CGAL. Those features were actually no longer supported since CGAL-5.3 but it was not properly announced.

Shape Regularization (new package)

    This package enables to regularize a set of segments and open or closed contours in 2D and a set of planes in 3D such that all input objects are rotated and aligned with respect to the user-specified conditions. In addition, it provides a global regularization framework that can be adjusted for the user needs and any type of geometric objects.

Weights (new package)

    This package provides a simple and unified interface to different types of weights. In particular, it groups all weights into three category: analytic weights including all basic weights which can be computed analytically for a query point with respect to its local neighbors in 2D and 3D; barycentric weights, including all weights which can be computed for a query point with respect to the vertices of a planar polygon; and weighting regions, including all weights which are used to balance other weights.

2D Generalized Barycentric Coordinates (major changes)

    Breaking change: The headers Segment_coordinates_2.h and Triangle_coordinates_2.h are renamed to segment_coordinates_2.h and triangle_coordinates_2.h.
    The classes Segment_coordinates_2 and Triangle_coordinates_2 are deprecated. The free functions compute_segment_coordinates_2() and compute_triangle_coordinates_2() are deprecated as well. Instead, the free functions segment_coordinates_2() and triangle_coordinates_2() should be used.
    The enums Query_point_location and Type_of_algorithm are deprecated. Instead, the enum Computation_policy_2 should be used.
    The classes Wachspress_2, Discrete_harmonic_2, Mean_value_2, and Generalized_barycentric_coordinates_2 are deprecated. As consequence, the concept BarycentricCoordinates_2 is deprecated as well. Instead, the classes Wachspress_coordinates_2, Discrete_harmonic_coordinates_2, and Mean_value_coordinates_2 should be used.
    Added the class Harmonic_coordinates_2 to compute approximate harmonic coordinates in 2D. These coordinates satisfy all properties of barycentric coordinates inside any simple polygon.
    Added a new concept DiscretizedDomain_2 and a model of this concept called Delaunay_domain_2, which is based on the Mesh 2 package. A model of this concept is required to use Harmonic_coordinates_2.
    Added free functions to compute Wachspress, discrete harmonic, and mean value coordinates.
    All free functions and classes are now using ranges and property maps.

2D and 3D Linear Geometry Kernel

    Most operations on CGAL::Exact_predicates_exact_constructions_kernel objects are now thread-safe if CGAL::Exact_rational is mpq_class (from GMPXX), boost::multiprecision::mpq_rational or CGAL::Quotient<CGAL::MP_Float>. The objects are not atomic though, so the usual restrictions on avoiding race conditions apply. For users who do not use threads, this can be disabled with CGAL_HAS_NO_THREADS.

    Added documentation for the class Projection_traits_3, which enables the use of 2D algorithms on the projections of 3D data onto an arbitrary plane.

    Added construct_centroid_2_object() and compute_determinant_2_object() in Projection_traits_xy_3, Projection_traits_xz_3, and Projection_traits_yz_3 classes.

    Added the functor NonZeroCoordinateIndex_3 to the concept Kernel with int operator()(Vector_3) which returns the index of any coordinate of the vector different from zero, or -1.

dD Kernel

    Most operations on Epeck_d objects are now thread-safe, see 2D and 3D Linear Geometry Kernel for details.

2D Arrangements

    Breaking Change: The traits function objects Compare_x_at_limit_2 and Compare_x_near_limit_2 are renamed to Compare_x_on_boundary_2 and Compare_x_near_boundary_2, respectively.

    A new hierarchy of traits concepts has been introduced. It captures all the valid combinations of boundary conditions for the 4 boundary sides of the parameter space. The 4 boundaries are Bottom, Top, Left, and Right. Each boundary side can be either contracted, identified, close, open, or oblivious. Not all possible combinations are valid. If one side is identified then the other must be as well. Two adjacent sides cannot be contracted.

    A new geometric traits, Arr_geodesic_arc_on_sphere_traits_2 has been introduced. It handles arcs of great circles embedded on the unit sphere.

2D Regularized Boolean Set-Operations

    Added an extra parameter (UsePolylines) to all free functions ( complement(), do_intersect(), intersection(), join(), difference(), symmetric_difference(), and oriented_side) to control whether to use Arr_polyline_traits_2 as default traits. It is the new default as it provides better performances in general.

3D Mesh Generation

    Added support of weighted images for an improved quality of meshes generated from labeled images, along with a function CGAL::Mesh_3::generate_label_weights() to generate the weights.

Polygon Mesh Processing

    Added the function CGAL::Polygon_mesh_processing::match_faces(), which, given two polygon meshes, identifies their common faces as well as faces present in only either of them.

    Added the functions: CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance() that computes an estimate of the one-sided Hausdorff distance between two triangle meshes which is bounded by a user-specified error bound; CGAL::Polygon_mesh_processing::bounded_error_symmetric_Hausdorff_distance() that computes an estimate of the symmetric Hausdorff distance bounded by a user-specified error bound; and CGAL::Polygon_mesh_processing::is_Hausdorff_distance_larger() that returns true if the bounded-error Hausdorff distance between two meshes is larger than the user-specified max distance.

    Added the functions CGAL::Polygon_mesh_processing::squared_edge_length() and CGAL::Polygon_mesh_processing::squared_face_area(), which, compared to CGAL::Polygon_mesh_processing::edge_length() and CGAL::Polygon_mesh_processing::face_area(), enable avoiding square-root operations.

    Added more functions in the visitor of the corefinement based methods to track all vertex creations.

    Added an option to CGAL::Polygon_mesh_processing::self_intersections() to report only a limited number of intersections (maximum_number()).

The Heat Method

    Breaking change: Added the functor Compute_squared_length_3 providing operator(const Vector_3& v), which computes the squared length of v, to the HeatMethodTraits_3 concept.

Point Set Processing

    Added support for libpointmatcher::GenericDescriptorOutlierFilter that enables providing a map from a point to a weight associated with this point.

Shape Detection

    Added new shapes to the Region Growing algorithm on a point set: circles in 2D, spheres in 3D, and cylinders in 3D.

CGAL and Solvers

    Added support for the OSQP solver. This solver enables to efficiently compute the convex Quadratic Programming (QP) problems arising in the context of several packages.

CGAL-5.3

The CGAL Open Source Project is pleased to announce the release 5.3 of CGAL, the Computational Geometry Algorithms Library.

Besides fixes and general enhancement to existing packages, the following has changed since CGAL 5.2:

General changes

    The support for the compiled version of CGAL is dropped. Only the header-only version is supported.

    On Windows, the type used for Exact_rational, in Epick and indirectly (through Lazy_exact_nt)
    Epeck may now be boost::multiprecision::mpq_rational, as has been the case on other platforms
    for several releases. This depends on various options and is added to a list that includes
    mpq_class, CGAL::Gmpq, leda_rational and CGAL::Quotient<CGAL::MP_Float>.

Quadtrees, Octrees, and Orthtrees (new package)

    This package implements a tree data structure in which each node encloses a hypercubic section
    of space and each non-leave node has hypercubic children whose edge lengths are half its edge length.
    Such a data structure is known as a quadtree in 2D, an octree in 3D, and is generalized
    as an "orthtree" in higher dimensions.

Triangulations on the Sphere (new package)

    This package enables the construction and manipulation of Delaunay triangulations on the 2-sphere.
    Triangulations are built incrementally and can be modified by insertion or removal of vertices.
    Point location querying and primitives to build the dual Voronoi diagram are provided.

File Input / Output

    Point set, polygon soup, and polygon mesh file I/O functions have been harmonized and documented:
        Point set I/O functions can be found in the packages Point_set_processing_3, and Point_set_3.
        Polygon mesh I/O functions can be found in the package BGL.
        Polygon soup I/O can be found in the package Stream_support.

A comprehensive list of the supported file formats is available in the Stream_support package here; inversely, the following page can be used to find out which CGAL data structures can be used given a specific file format.
Requirements

    The CMake minimal version is now 3.14.
    The GNU compiler g++ versions 6 and 7 are no longer tested. Only version 8.3 or later are supported

2D and 3D Linear Geometry Kernel

    Added is_translation(), is_scaling(), is_reflection(), and is_rotation() to the classes
    Aff_transformation_2
    and Aff_transformation_3,
    which enable determining if the transformations use a specialized representation internally.

2D Regularized Boolean Set-Operations

    Added documentation for the free functions oriented_side(const Point_2& p, ....)
    that accept a point and a polygon.
    Documentation has been improved across the whole package.

Polygon Mesh Processing

    Added the class CGAL::Polyhedral_envelope,
    providing a way to quickly check if a primitive (point, segment, or triangle)
    is within a polyhedral envelope around a set of triangles. It is based on the work of
    Bolun Wang, Teseo Schneider, Yixin Hu, Marco Attene, and Daniele Panozzo.
    "Exact and efficient polyhedral envelope containment check." (ACM Trans. Graph., 39-4, July 2020).
    Added more functions in the visitor of the corefinement based methods
    to track all edge creations.

Surface Mesh Topology

    Added the function CGAL::Surface_mesh_topology::Curves_on_surface_topology::is_homotopic_to_simple_cycle(),
    which can be used to determine whehter a closed path on a surface mesh can be continously
    transformed to a cycle without self intersection.

Surface Mesh Simplification

    Added a filtering mechanism so that costly tests get only applied to the next candidate for the edge collapse.
    Added the class Polyhedral_envelope_filter,
    which enables to perform mesh simplification inside a polyhedral envelope of the input mesh.

2D Polyline Simplification

    When polylines have common subsequences of vertices, these subsequences may now be simplifified simultaneously.

dD Triangulations

    Added the function insert_if_in_star()
    to the class CGAL::Regular_triangulation,
    which enables users to insert a point p in a regular triangulation on the condition that p
    appears post-insertion in the star of a user-specified, existing vertex.

2D and 3D Alpha Shapes

    Breaking change: The following deprecated classes have been removed: Alpha_shape_euclidean_traits_2,
    Weighted_alpha_shape_euclidean_traits_2, Alpha_shape_euclidean_traits_3, and
    Weighted_alpha_shape_euclidean_traits_3. All CGAL kernel can be used directly as models
    of the concepts of the 2D and 3D Alpha Shape packages.

Classification

    Breaking change: the support for TensorFlow has been dropped; the
    classifier CGAL::TensorFlow::Neural_network_classifier has been removed.

CGAL-5.2

CGAL 5.2 offers the following improvements and new functionality over CGAL 5.1:

dD Geometry Kernel

    The kernels Epick_d and Epeck_d gain two new functors: Compute_power_product_d and Construct_power_sphere_d, to deal with weighted points.

CGAL and the Boost Graph Library (BGL)

    Added a convenience header, CGAL/boost/graph/graph_traits_inheritance_macros.h, which enables easily making any class inheriting from a model of a face graph concept, a model of the same concept.
    Added the function can_add_face(), which tests whether a new face defined by a range of vertices can be added.

3D Fast Intersection and Distance Computation (AABB Tree)

    Added the move constructor and the assignment operator to the AABB Tree class.

2D Arrangements

    Replaced the use of legacy CGAL::Object to modern boost::variant.
    Changed make-x-monotone return type from legacy CGAL::Object to boost::variant in all traits concepts and models. As there exists an implicit conversion from boost::variant to CGAL::Object, the new code is backward compatible. However, it is recommended that all calls to the make-x-monotone functions are fixed to use the new return type.
    Changed decompose() interface to use boost::variant instead of legacy CGAL::Object As explained above, the code is backward compatible. However, it is recommended that all calls to decompose() are fixed to use the new interface.

Surface Mesh

    Added the function clear_without_removing_property_maps() to clear a mesh but keep all the created property maps added.
    Added the functions remove_property_maps<Index_type>() and remove_all_property_maps() to remove all added property maps by index type or all of them respectively.
    Added the functions set_recycle_garbage() and does_recycle_garbage() to the class Surface_mesh.

Polygon Mesh Processing

    Added a visitor to the functions CGAL::Polygon_mesh_processing::triangulate_face() and CGAL::Polygon_mesh_processing::triangulate_faces(), that enables the user to keep track of the newly created faces through the triangulation process.
    Added an option in CGAL::Polygon_mesh_processing::corefine(), CGAL::Polygon_mesh_processing::split() and CGAL::Polygon_mesh_processing::clip() functions, which enable the operations to be performed on a mesh with self-intersections present in the intersection area.
    Added an optional range parameter to CGAL::Polygon_mesh_processing::stitch_borders(), which can be used to specify which boundary cycles are eligible for stitching.

Surface Mesh Parameterization

    Added a new parameterization method, Iterative Authalic Parameterization. It is based on the work of Jain, Hardik, Manuel Wollhaf, and Olaf Hellwich, "Learning to Reconstruct Symmetric Shapes using Planar Parameterization of 3D Surface." (IEEE International Conference on Computer Vision Workshops, 2019).

Classification

    Breaking change: new IO format for the ETHZ::Random_Forest classifier: a conversion function from the outdated format to the new one is provided.
    Added new functions to the class CGAL::Classification::Evaluation: append() to enrich the evaluation with additional results; confusion() to access the confusion matrix; output functions to save the evaluation to and ASCII or HTML stream.
    Added a new operator, CGAL::Classification::feature_cast<>, for easy conversions.
    The classes CGAL::Classification::Feature_set and CGAL::Classification::Label_set are now models of the concept Range.
    The class CGAL::Classification::Label now has attributes index, standard_index and color, with automatic selection if the ASPRS standard names are used.
    Added new functions in CGAL::Classification::Point_set_feature_iterator, to enable users to select which features should be generated.
    Added a new function, CGAL::Classification::Label_set::is_valid_ground_truth(), to help users check if a ground truth matches a given label set.

Point Set Processing

    Added a function CGAL::scanline_orient_normals(), which orients a point cloud by estimating a line of sight.

3D Convex Hulls

    Added the function CGAL::halfspace_intersection_interior_point_3(), which can be used to retrieve the point that is the most interior a convex closed volume defined by the intersection of a set of halfspaces.

3D Triangulations

    Added new classes and functions to visit the cells and simplices intersected by a line segment, see Sections Segment Cell Iterator and Segment Simplex Iterator, respectively.

CGAL-5.1

The CGAL Open Source Project is pleased to announce the release 5.1 of CGAL, the Computational Geometry Algorithms Library.

Besides fixes and general enhancement to existing packages, the following has changed since CGAL 5.0:

Tetrahedral Remeshing (new package)

    This package implements a tetrahedral isotropic remeshing algorithm,
    that improves the quality of tetrahedra in terms of dihedral angles,
    while targeting a given edge length.

    See also the associated blog entry.

Surface Mesh Topology (new package)

    This package enables the computation of some topological invariants of surfaces, such as:
        test if two (closed) curves on a combinatorial surface are homotopic. Users can choose
        between free homotopy and homotopy with fixed endpoints;
        test is a curve is contractible;
        compute shortest non-contractible cycles on a surface, with or without weights on edges.

    See also the associated blog entry.

Optimal Bounding Box (new package)

    This package implements an optimization algorithm that aims to construct a close approximation
    of the optimal bounding box of a mesh or a point set, which is defined as the smallest
    (in terms of volume) bounding box that contains a given mesh or point set.

    See also the associated blog entry.

Installation

    The CGAL_Core library no longer requires Boost.Thread, even if the g++ compiler is used.
    The minimal supported version of Boost is now 1.66.0.

Tutorials

    Two new, detailed tutorials have been added:
        Surface Reconstruction from Point Clouds,
        which goes over a typical full processing pipeline in a CGAL environment.
        Geographic Information Systems (GIS),
        which demonstrates usage of CGAL data structures and algorithms in the context of a typical GIS application.

    Both tutorials provide complete code.

Point Set Processing

    Added wrapper functions for registration, using the Super4PCS and ICP algorithms implemented in the third party libraries OpenGR and libpointmatcher.

Surface Mesh Simplification

    Added a new simplification method based on the quadric error defined by Garland and Heckbert.

dD Spatial Searching

    The kd-tree can now be built in parallel: CGAL::Kd_tree::build() is given an optional template parameter ConcurrencyTag (default value remains CGAL::Sequential_tag for backward compatibility).

Intersecting Sequences of dD Iso-oriented Boxes

    Added parallel versions of the functions CGAL::box_intersection_d() and CGAL::box_self_intersection_d().

Polygon Mesh Processing

    Added the function CGAL::Polygon_mesh_processing::split(), which can be used to split meshes along a mesh or a plane.
    Added the function CGAL::Polygon_mesh_processing::split_connected_components() to split a single mesh containing several connected components into several meshes containing one connected component.
    Added parallel versions of the functions CGAL::Polygon_mesh_processing::does_self_intersect() and CGAL::Polygon_mesh_processing::self_intersections().
    Added several mesh repair functions (see the complete changelog for
    more information).

3D Fast Intersection and Distance Computation

    The behavior of the internal search tree used to accelerate distance queries has changed:
    usage of the internal search tree will now be enabled by default, and its construction
    will be triggered by the first distance query. Automatic construction and usage can be disabled
    by calling CGAL::AABB_tree::do_not_accelerate_distance_queries()
    before the first distance query, and the tree can be built at any moment by calling
    CGAL::AABB_tree::accelerate_distance_queries().
    Breaking change: CGAL::AABB_tree::accelerate_distance_queries()
    and CGAL::AABB_tree::do_not_accelerate_distance_queries()
    are no longer const functions.

CGAL and the Boost Graph Library (BGL)

    Added the function CGAL::alpha_expansion_graphcut(), which regularizes a multi-label partition over a user-defined graph.
    Added the function CGAL::regularize_face_selection_borders(), which uses this alpha expansion graphcut to regularize the borders of a selected faces on a triangle mesh.

See https://www.cgal.org/2020/09/08/cgal51/ for a complete list of changes.

CGAL-5.0

The CGAL Open Source Project is pleased to announce the release 5.0
of CGAL, the Computational Geometry Algorithms Library.

Besides fixes and general enhancement to existing packages, the
following has changed since CGAL 4.14.2:

General changes

    CGAL 5.0 is the first release of CGAL that requires a C++ compiler
    with the support of C++14 or later. The new list of supported
    compilers is:
        Visual C++ 14.0 (from Visual Studio 2015 Update 3) or later,
        Gnu g++ 6.3 or later (on Linux or MacOS),
        LLVM Clang version 8.0 or later (on Linux or MacOS), and
        Apple Clang compiler versions 7.0.2 and 10.0.1 (on MacOS).
    Since CGAL 4.9, CGAL can be used as a header-only library, with
    dependencies. Since CGAL 5.0, that is now the default, unless
    specified differently in the (optional) CMake configuration.
    The section "Getting Started with CGAL" of the documentation has
    been updated and reorganized.
    The minimal version of Boost is now 1.57.0.

Polygonal Surface Reconstruction (new package)

    This package provides a method for piecewise planar object reconstruction from point clouds.
    The method takes as input an unordered point set sampled from a piecewise planar object
    and outputs a compact and watertight surface mesh interpolating the input point set.
    The method assumes that all necessary major planes are provided (or can be extracted from
    the input point set using the shape detection method described in Point Set Shape Detection,
    or any other alternative methods).The method can handle arbitrary piecewise planar objects
    and is capable of recovering sharp features and is robust to noise and outliers. See also
    the associated blog entry.

Shape Detection (major changes)

    Breaking change: The concept ShapeDetectionTraits has been renamed to EfficientRANSACTraits.
    Breaking change: The Shape_detection_3 namespace has been renamed to Shape_detection.
    Added a new, generic implementation of region growing. This enables for example applying region growing to inputs such as 2D and 3D point sets,
    or models of the FaceGraph concept. Learn more about this new algorithm with this blog entry.

dD Geometry Kernel

    A new exact kernel, Epeck_d, is now available.

2D and 3D Triangulations

    Breaking change: Several deprecated functions and classes have been
    removed. See the full list of breaking changes in the release
    notes.

    Breaking change: The constructor and the insert() function of
    CGAL::Triangulation_2 or CGAL::Triangulation_3 which take a range
    of points as argument are now guaranteed to insert the points
    following the order of InputIterator. Note that this change only
    affects the base class CGAL::Triangulation_[23] and not any
    derived class, such as CGAL::Delaunay_triangulation_[23].

Polygon Mesh Processing

    Introduced a wide range of new functions
    related to location of queries on a triangle mesh,
    such as CGAL::Polygon_mesh_processing::locate(Point, Mesh).
    The location of a point on a triangle mesh is expressed as the pair of a face and the barycentric
    coordinates of the point in this face, enabling robust manipulation of locations
    (for example, intersections of two 3D segments living within the same face).
    Added the mesh smoothing function smooth_mesh(),
    which can be used to improve the quality of triangle elements based on various geometric characteristics.
    Added the shape smoothing function smooth_shape(),
    which can be used to smooth the surface of a triangle mesh, using the mean curvature flow to perform noise removal.
    (See also the new entry in the User Manual)

Point Set Processing

    Breaking change: the API using iterators and overloads for optional parameters (deprecated since
    CGAL 4.12) has been removed. The current (and now only) API uses ranges and Named Parameters.

See https://www.cgal.org/2019/11/08/cgal50/ for a complete list of changes.
