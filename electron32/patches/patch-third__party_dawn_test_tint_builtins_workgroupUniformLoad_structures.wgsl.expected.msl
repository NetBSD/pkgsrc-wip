$NetBSD$

* Part of patchset to build electron on NetBSD
* Based on OpenBSD's chromium patches, and
  FreeBSD's electron patches

--- third_party/dawn/test/tint/builtins/workgroupUniformLoad/structures.wgsl.expected.msl.orig	2024-10-18 12:38:05.975993900 +0000
+++ third_party/dawn/test/tint/builtins/workgroupUniformLoad/structures.wgsl.expected.msl
@@ -14,24 +14,62 @@ struct tint_array {
     T elements[N];
 };
 
+struct tint_packed_vec3_f32_array_element {
+  packed_float3 elements;
+};
+
+struct Inner_tint_packed_vec3 {
+  bool b;
+  int4 v;
+  tint_array<tint_packed_vec3_f32_array_element, 3> m;
+};
+
+struct Outer_tint_packed_vec3 {
+  tint_array<Inner_tint_packed_vec3, 4> a;
+};
+
+float3x3 tint_unpack_vec3_in_composite(tint_array<tint_packed_vec3_f32_array_element, 3> in) {
+  float3x3 result = float3x3(float3(in[0].elements), float3(in[1].elements), float3(in[2].elements));
+  return result;
+}
+
 struct Inner {
   bool b;
   int4 v;
   float3x3 m;
 };
 
+Inner tint_unpack_vec3_in_composite_1(Inner_tint_packed_vec3 in) {
+  Inner result = {};
+  result.b = in.b;
+  result.v = in.v;
+  result.m = tint_unpack_vec3_in_composite(in.m);
+  return result;
+}
+
+tint_array<Inner, 4> tint_unpack_vec3_in_composite_2(tint_array<Inner_tint_packed_vec3, 4> in) {
+  tint_array<Inner, 4> result = tint_array<Inner, 4>{tint_unpack_vec3_in_composite_1(in[0]), tint_unpack_vec3_in_composite_1(in[1]), tint_unpack_vec3_in_composite_1(in[2]), tint_unpack_vec3_in_composite_1(in[3])};
+  return result;
+}
+
 struct Outer {
   tint_array<Inner, 4> a;
 };
 
-Outer tint_workgroupUniformLoad(threadgroup Outer* const p) {
+Outer tint_unpack_vec3_in_composite_3(Outer_tint_packed_vec3 in) {
+  Outer result = {};
+  result.a = tint_unpack_vec3_in_composite_2(in.a);
+  return result;
+}
+
+Outer tint_workgroupUniformLoad(threadgroup Outer_tint_packed_vec3* const p) {
   threadgroup_barrier(mem_flags::mem_threadgroup);
-  Outer const result = *(p);
+  Outer const result = tint_unpack_vec3_in_composite_3(*(p));
   threadgroup_barrier(mem_flags::mem_threadgroup);
   return result;
 }
 
-Outer foo(threadgroup Outer* const tint_symbol) {
+Outer foo(threadgroup Outer_tint_packed_vec3* const tint_symbol) {
   return tint_workgroupUniformLoad(tint_symbol);
 }
 
