Joker is a small interpreted dialect of Clojure written in Go. It is also a
Clojure(Script) linter.

Project goals:
- Be suitable for scripting (lightweight, fast startup). This is something that
  Clojure is not good at and my personal itch I am trying to scratch.
- Be user friendly. Good error messages and stack traces are absolutely critical
  for programmer's happiness and productivity.
- Provide some tooling for Clojure and its dialects. Joker has linter mode which
  can be used for linting Joker, Clojure and ClojureScript code. It catches some
  basic errors. Joker can also format (pretty print) Clojure code (see format
  mode) or EDN data structures. For example, the following command can be used to
  pretty print EDN data structure (read from stdin):

Project Non-goals:
- Performance. If you need it, use Clojure. Joker is a naive implementation of an
  interpreter that evaluates unoptimized AST directly. I may be interested in
  doing some basic optimizations but this is definitely not a priority.
- Have all Clojure features. Some features are impossible to implement due to a
  different host language (Go vs Java), others I don't find that important for
  the use cases I have in mind for Joker. But generally Clojure is a pretty large
  language at this point and it is simply unfeasible to reach feature parity with
  it, even with naive implementation.


